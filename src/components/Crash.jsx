/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 public/models/crash/untitled.glb -k 
*/

import React, { useRef, useEffect } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { useControls } from "leva";

export function Crash(props) {
  const group = useRef()
  const { nodes, materials, animations } = useGLTF('./models/crash/Crash_New.glb')
  const { actions } = useAnimations(animations, group)

 let oldAction = null;

  useControls({
   
    //come up with a better way to do this, currently manually putting in the names of the animations
    'Crash': {
        value: "A_CP3701_Celebrate_Bravo",
        options:["A_CP3701_Celebrate_Bravo", "A_CP3701_Run","A_CP3701_Idle","A_CP3701_Level_Start_Dance", "A_CP3701_JumpUpLoop","A_CP3701_Crash_Attack_Spin_Loop"],
        onChange: (value) => {
            if (oldAction) oldAction.fadeOut(0.5).stop();
            oldAction = actions[value];
            actions[value].reset().fadeIn(0.5).play()
           
        }
            },
        })  
     
  

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="SK_CP3701_Crashao" scale={10}>
          <primitive object={nodes.root} />
          <group name="SK_CP3701_Crashmo">
            <skinnedMesh name="SK_CP3701_Crashmd" geometry={nodes.SK_CP3701_Crashmd.geometry} material={materials.MI_CP3701_Crash_Fur} skeleton={nodes.SK_CP3701_Crashmd.skeleton} />
            <skinnedMesh name="SK_CP3701_Crashmd_1" geometry={nodes.SK_CP3701_Crashmd_1.geometry} material={materials.MI_CP3701_Crash} skeleton={nodes.SK_CP3701_Crashmd_1.skeleton} />
            <skinnedMesh name="SK_CP3701_Crashmd_2" geometry={nodes.SK_CP3701_Crashmd_2.geometry} material={materials.MI_CP3701_Crash_Eyes} skeleton={nodes.SK_CP3701_Crashmd_2.skeleton} />
          </group>
        </group>
      </group>
    </group>
  )
} 

useGLTF.preload('./Crash_New.glb')